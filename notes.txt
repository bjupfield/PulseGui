okay this is the the three functions that are needed to establish a vao are

vertexArrayVertexBuffer
vertexAttribBinding
vertexAttribFormat

to query for vertex attributes locations we need
getProgramiv
getActiveAttrib
getAttribLocation
uniforms use instead
getActiveUniform
getUniformLocation

will be using an alignment method so instead of having 30 different vaos for the same program with different objects 
there can only be 1 vao for the same program with different objects, this will obviously make the memory a bit less effecient, will
track the alignment padding space to see if its too much

ponts -> 0
lines -> 1
line loop -> 2
line strip -> 3
triangles -> 4
triangle strip -> 5
triangle fan -> 6
gl quads  -> 7
gl quad strip -> 8
gl polygon -> 9
line -> adjancy
line strip adjancy -> b
trianlge adjancy -> c
triangle strip adjancy -> d
patches -> e

types:
GL_BYTE                         => 0x1400
GL_UNSIGNED_BYTE                 => 0x1401
GL_SHORT                        => 0x1402
GL_UNSIGNED_SHORT                => 0x1403
GL_INT                          => 0x1404
GL_UNSIGNED_INT                  => 0x1405
GL_FLOAT                        => 0x1406
GL_DOUBLE                       => 0x140A
GL_HALF_FLOAT                   => 0x140B
GL_FIXED                        => 0x140C
GL_UNSIGNED_INT_2_10_10_10_REV  => 0x8368
GL_UNSIGNED_INT_10F_11F_11F_REV => 0x8C3B
GL_INT_2_10_10_10_REV           => 0x8D9F

GL_FLOAT_VEC2 => 0x8B50
GL_FLOAT_VEC3 => 0x8B51
GL_FLOAT_VEC4 => 0x8B52


error codes:
GL_INVALID_OPERATION => 1282; 0x502
GL_INVALID_VALUE => 1281; 0x501
GL_INVALID_ENUM => 1280; 0x500