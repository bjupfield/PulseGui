okay this is the the three functions that are needed to establish a vao are

vertexArrayVertexBuffer
vertexAttribBinding
vertexAttribFormat

to query for vertex attributes locations we need
getProgramiv
getActiveAttrib
getAttribLocation
uniforms use instead
getActiveUniform
getUniformLocation

will be using an alignment method so instead of having 30 different vaos for the same program with different objects 
there can only be 1 vao for the same program with different objects, this will obviously make the memory a bit less effecient, will
track the alignment padding space to see if its too much

ponts -> 0
lines -> 1
line loop -> 2
line strip -> 3
triangles -> 4
triangle strip -> 5
triangle fan -> 6
gl quads  -> 7
gl quad strip -> 8
gl polygon -> 9
line -> adjancy
line strip adjancy -> b
trianlge adjancy -> c
triangle strip adjancy -> d
patches -> e

types:
GL_BYTE
GL_SHORT
GL_INT
GL_FIXED
GL_FLOAT
GL_HALF_FLOAT
GL_DOUBLE
GL_UNSIGNED_BYTE
GL_UNSIGNED_SHORT
GL_UNSIGNED_INT
GL_INT_2_10_10_10_REV
GL_UNSIGNED_INT_2_10_10_10_REV
GL_UNSIGNED_INT_10F_11F_11F_REV

error codes:
GL_INVALID_OPERATION => 1282; 0x502
GL_INVALID_VALUE => 1281; 0x501
GL_INVALID_ENUM => 1280; 0x500